#!/usr/bin/env bash

usage() {
cat <<EOM
Syntax: ./$(basename $0) [options]
    
    -P <profile_name> (required) Create or open a profile
    -p <adress:port>             Specify a proxy server to use, will use 127.0.0.1:8080 by default
    -c <color_name>              Specify a color to use(blue, cyan, green, yellow, orange, red, magenta, pink), no color is used by default
    -u <user_agent>              Specify an user agent to use
    -x                           Disable the proxy
    -d                           Disable remote debugging
    
    -L                           List available profiles
    -D <profile_name>            Delete a profile
    -h                           Help
EOM
}

[ $# -eq 0 ] && { usage; exit 1; }

if [[ ! -d "$HOME/.BurpSuite/pre-wired-browser" ]]
then
  echo "Can't find the Burp browser profile directory, you need to start the embedded browser once so it will be created(open Burp -> Proxy -> Open Browser). You will only need to do this once."
  exit
fi

proxyserver="127.0.0.1:8080"

while getopts ':p:u:h:P:c:LdxD:' opt; do
  case "$opt" in
    p)
      proxyserver="$OPTARG"
      ;;
    u)
      useragent="$OPTARG"
      ;;
    P)
      profilename="$OPTARG"
      ;;
    c)
      colorname="$OPTARG"
      ;;
    L)
      listprofiles=""
      ;;
    x)
      noproxy=""
      ;;
    d)
      nodebugging=""
      ;;
    D)
      deleteprofile="$OPTARG"
      ;;
    h)
      usage; exit
      ;;
    :)
      echo -e "option requires an argument.\n"; usage; exit
      ;;
    ?)
      echo -e "Invalid command option.\n"; usage; exit
      ;;
  esac
done
shift "$(($OPTIND -1))"

if [[ -n $proxyserver ]] && [[ -n ${noproxy+x} ]]
then
  echo "Conflicting arguments, you can't run with both -p and -x arguments at the same time"
  exit
fi 

if [[ -z $profilename ]] && [[ ! -d "$HOME/.BurpSuite/burp-browser-profiles" ]]
then
  echo "It looks like you did not created any profile yet, run the command again with -P profile_name to create a profile"
  exit
fi

if [[ -n ${listprofiles+x} ]]
then
  echo -e "Available profiles:\n"
  ls -1 $HOME/.BurpSuite/burp-browser-profiles/
  exit
fi  

if [[ -n $deleteprofile ]] 
then
  if  [[ -d "$HOME/.BurpSuite/burp-browser-profiles/$deleteprofile" ]]
  then
    rm -rf "$HOME/.BurpSuite/burp-browser-profiles/$deleteprofile"
    exit
  else
    echo "Profile does not exist"
    exit
  fi
fi

if [[ ! -d "$HOME/.BurpSuite/burp-browser-profiles_data" ]]
then
  mkdir "$HOME/.BurpSuite/burp-browser-profiles_data"
  cp -r burp-browser-profiles-theme "$HOME/.BurpSuite/burp-browser-profiles_data/burp-browser-profiles-theme" 
  cp -r burp-browser-profiles-extension "$HOME/.BurpSuite/burp-browser-profiles_data/burp-browser-profiles-extension" 
fi

if [[ ! -d "$HOME/.BurpSuite/burp-browser-profiles" ]]
then
  mkdir "$HOME/.BurpSuite/burp-browser-profiles"
fi

if [[ ! -d "$HOME/.BurpSuite/burp-browser-profiles/$profilename" ]]
then
  cp -r "$HOME/.BurpSuite/pre-wired-browser" "$HOME/.BurpSuite/burp-browser-profiles/$profilename"
  cp -r "$HOME/.BurpSuite/burp-browser-profiles_data/burp-browser-profiles-theme" "$HOME/.BurpSuite/burp-browser-profiles/$profilename/burp-browser-profiles-theme" 
  cp -r "$HOME/.BurpSuite/burp-browser-profiles_data/burp-browser-profiles-extension" "$HOME/.BurpSuite/burp-browser-profiles/$profilename/burp-browser-profiles-extension" 
fi

datadir="$HOME/.BurpSuite/burp-browser-profiles/$profilename"

if [[ -n $colorname ]]
then
  case $colorname in
    "blue")
      headercolor="blue:[0,0,255]"
      ;;
    "cyan")
      headercolor="cyan:[0,255,255]"
      ;;
    "green")
      headercolor="green:[0,255,0]"
      ;;
    "yellow")
      headercolor="yellow:[255,255,0]"
      ;;
    "orange")
      headercolor="orange:[255,140,0]"
      ;;
    "red")
      headercolor="red:[255,0,0]"
      ;;
    "pink")
      headercolor="pink:[255,105,180]"
      ;;
    "magenta")
      headercolor="magenta:[128,0,128]"
  esac

  rgb_color="\"frame\" : $(echo $headercolor|cut -d":" -f 2)"
  perl -pi -e "s/^.*frame.*$/$rgb_color/" $datadir/burp-browser-profiles-theme/manifest.json

  extension_color="var color = \'$(echo $headercolor|cut -d":" -f 1)\';"
  perl -pi -e "s/^.*var color.*$/$extension_color/" $datadir/burp-browser-profiles-extension/background.js

  loadextension_arg="--load-extension=$HOME/.BurpSuite/burp-chromium-extension,$datadir/burp-browser-profiles-theme,$datadir/burp-browser-profiles-extension"
else
  if [[ -f "$datadir/Default/Preferences" ]] 
  then
    perl -pi -e 's/"theme[^}]*/"theme":{"use_system":true/' $datadir/Default/Preferences
  fi
  loadextension_arg="--load-extension=$HOME/.BurpSuite/burp-chromium-extension"
fi

if [[ -n $useragent ]]
then
  useragent_arg="--user-agent=$(echo $useragent)"
fi

nodebugging_arg="--remote-debugging-port=0"
if [[ -n ${nodebugging+x} ]]
then
  nodebugging_arg=""
fi

if [ "$(uname)" == "Darwin" ]; 
then
  ls -td -- /Applications/Burp\ Suite\ */Contents/Resources/app/burpbrowser/* 2>&1
  if [[ $? -eq 0 ]]
  then
    latest_browser_path="$(ls -td -- /Applications/Burp\ Suite\ */Contents/Resources/app/burpbrowser/* | head -n 1)/Chromium.app/Contents/MacOS/Chromium"
    "$latest_browser_path" "$useragent_arg" --proxy-server=$proxyserver --proxy-bypass-list="<-loopback>" "$nodebugging_arg" --disable-ipc-flooding-protection --disable-xss-auditor --disable-bundled-ppapi-flash --disable-plugins-discovery --disable-default-apps --disable-prerender-local-predictor --disable-save-password-bubble --disable-sync --disable-audio-output --disable-breakpad --disable-crash-reporter --disable-prerender-local-predictor --disk-cache-size=0 --disable-settings-window --disable-notifications --disable-speech-api --disable-file-system --disable-presentation-api --disable-permissions-api --disable-new-zip-unpacker --disable-media-session-api --noerrdialogs --no-experiments --no-events --no-first-run --no-default-browser-check --no-pings --no-service-autorun --media-cache-size=0 --autoplay-policy=document-user-activation-required --overscroll-history-navigation=0 --use-fake-device-for-media-stream --dbus-stub --use-mock-keychain --disable-background-networking --disable-features=ChromeWhatsNewUI --user-data-dir=$datadir --disable-background-networking --disable-sync --ignore-certificate-errors $loadextension_arg --enable-crashpad chrome://newtab > /dev/null 2>&1 &
  else
    latest_browser_path="$(ls -td -- $HOME/.BurpSuite/burpbrowser/* | head -n 1)/Chromium.app/Contents/MacOS/Chromium"
    "$latest_browser_path" "$useragent_arg" --proxy-server=$proxyserver --proxy-bypass-list="<-loopback>" "$nodebugging_arg" --disable-ipc-flooding-protection --disable-xss-auditor --disable-bundled-ppapi-flash --disable-plugins-discovery --disable-default-apps --disable-prerender-local-predictor --disable-save-password-bubble --disable-sync --disable-audio-output --disable-breakpad --disable-crash-reporter --disable-prerender-local-predictor --disk-cache-size=0 --disable-settings-window --disable-notifications --disable-speech-api --disable-file-system --disable-presentation-api --disable-permissions-api --disable-new-zip-unpacker --disable-media-session-api --noerrdialogs --no-experiments --no-events --no-first-run --no-default-browser-check --no-pings --no-service-autorun --media-cache-size=0 --autoplay-policy=document-user-activation-required --overscroll-history-navigation=0 --use-fake-device-for-media-stream --dbus-stub --use-mock-keychain --disable-background-networking --disable-features=ChromeWhatsNewUI --user-data-dir=$datadir --disable-background-networking --disable-sync --ignore-certificate-errors $loadextension_arg --enable-crashpad chrome://newtab > /dev/null 2>&1 &
  fi
else
  latest_browser_path="$(ls -td -- $HOME/.BurpSuite/burpbrowser/* | head -n 1)/chrome"
  "$latest_browser_path" "$useragent_arg" --proxy-server=$proxyserver --proxy-bypass-list="<-loopback>" "$nodebugging_arg" --disable-ipc-flooding-protection --disable-xss-auditor --disable-bundled-ppapi-flash --disable-plugins-discovery --disable-default-apps --disable-prerender-local-predictor --disable-save-password-bubble --disable-sync --disable-audio-output --disable-breakpad --disable-crash-reporter --disable-prerender-local-predictor --disk-cache-size=0 --disable-settings-window --disable-notifications --disable-speech-api --disable-file-system --disable-presentation-api --disable-permissions-api --disable-new-zip-unpacker --disable-media-session-api --noerrdialogs --no-experiments --no-events --no-first-run --no-default-browser-check --no-pings --no-service-autorun --media-cache-size=0 --autoplay-policy=document-user-activation-required --overscroll-history-navigation=0 --use-fake-device-for-media-stream --dbus-stub --use-mock-keychain --disable-background-networking --use-gl=angle --useangle=swiftshader-webgl --disable-features=ChromeWhatsNewUI --user-data-dir=$datadir --disable-background-networking --disable-sync --ignore-certificate-errors $loadextension_arg --enable-crashpad chrome://newtab > /dev/null 2>&1 &
fi
